{"name":"Orma","tagline":"An ORM for Android as a wrapper of SQLiteDatabase","body":"# Orma for Android [![Circle CI](https://circleci.com/gh/gfx/Android-Orma/tree/master.svg?style=svg)](https://circleci.com/gh/gfx/Android-Orma/tree/master) [ ![Download](https://api.bintray.com/packages/gfx/maven/orma/images/download.svg) ](https://bintray.com/gfx/maven/orma/_latestVersion)\r\n\r\n* Note that this is an **alpha** software and the interface will change until v1.0.0.\r\n\r\nOrma is a lightning-fast ORM (Object-Relation Mapper) for [Android SQLiteDatabase](http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html),\r\ngenerating helper classes at compile time with annotation processing.\r\n\r\nThere are already [a lot of ORMs](https://android-arsenal.com/tag/69). Why I have to add another?\r\n\r\nThe answer is that I need ORM that have the following features:\r\n\r\n* As fast as hand-written code is\r\n* Model classes must have no restriction\r\n  * They might be POJO, Parcelable and/or even models that are managed by another ORM\r\n  * They should be passed to another thread\r\n* Database handles must be instances\r\n  * Not a singleton nor static-method based class\r\n* Automatic migration\r\n  * For what can be detected logically\r\n  * i.e. simple `add column` and `drop column`\r\n* Code completion friendly\r\n  * `selectFromModel()` is better than `selectFrom(Model.class)`\r\n\r\nThey are just what Orma has. This is as fast as Realm, its models have no restriction, database handle is\r\nnot a singleton, and has `SchemaDiffMigration` for automatic migration.\r\n\r\n# Install\r\n\r\n```groovy\r\n// To use \"apt\" in dependencies\r\n\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\r\n    }\r\n}\r\n\r\napply plugin: 'com.neenbedankt.android-apt'\r\n```\r\n\r\n```groovy\r\n// To use orma in your Android applications or libraries\r\n\r\ndependencies {\r\n    apt 'com.github.gfx.android.orma:orma-processor:0.9.0'\r\n    compile 'com.github.gfx.android.orma:orma:0.9.0'\r\n}\r\n```\r\n\r\n# Synopsis\r\n\r\nFirst, define model classes annotated with `@Table`, `@Column`, and `@PrimaryKey`.\r\n\r\n```java\r\npackage com.github.gfx.android.orma.example;\r\n\r\nimport com.github.gfx.android.orma.annotation.Column;\r\nimport com.github.gfx.android.orma.annotation.PrimaryKey;\r\nimport com.github.gfx.android.orma.annotation.Table;\r\n\r\nimport android.support.annotation.Nullable;\r\n\r\n@Table\r\npublic class Todo {\r\n\r\n    @PrimaryKey\r\n    public long id;\r\n\r\n    @Column(indexed = true)\r\n    public String title;\r\n\r\n    @Column\r\n    @Nullable // indicates NOT NULL constraints\r\n    public String content;\r\n\r\n    @Column\r\n    public long createdTimeMillis;\r\n}\r\n```\r\n\r\nSecond, create a database handle `OrmaDatabase`, which is generated by `orma-processor`.\r\n\r\nTo make it:\r\n\r\n```java\r\n// see OrmaConfiguration for options\r\n// each value is the default value.\r\nOrmaDatabase orma = OrmaDatabase.builder(context)\r\n    .name(context.getPackageName() + \".orma.db\") // optional\r\n    .migrationEngine(new SchemaDiffMigration(context, BuildConfig.DEBUG)) // optional\r\n    .typeAdapters(TypeAdapterRegistry.defaultTypeAdapters()) // optional\r\n    .writeAheadLogging(true) // optional\r\n    .trace(BuildConfig.DEBUG) // optional\r\n    .readOnMainThread(AccessThreadConstraint.WARNING) // optional\r\n    .writeOnMainThread(AccessThreadConstraint.FATAL) // optional\r\n    .build();\r\n```\r\n\r\nThen, you can create, read, update and delete models:\r\n\r\n```java\r\nTodo todo = ...;\r\n\r\n// create\r\norma.insertIntoTodo(todo);\r\n\r\n// prepared statements with transaction\r\norma.transactionSync( -> { // or transactionAsync() to execute tasks in background\r\n    Inserter<Todo> inserter = orma.prepareInsertIntoTodo();\r\n    inserter.execute(todo);\r\n});\r\n\r\n// read\r\norma.selectFromTodo()\r\n  .titleEq(\"foo\") // equivalent to `where(\"title = ?\", \"foo\")`\r\n  .observable() // first-class RxJava interface\r\n  .subscribe(...);\r\n\r\n// update\r\norma.updateTodo()\r\n  .titleEq(\"foo\")\r\n  .content(\"a new content\")\r\n  .execute();\r\n\r\n// delete\r\norma.deleteFromTodo()\r\n  .titleEq(\"foo\")\r\n  .execute();\r\n```\r\n\r\nNote that **Orma checks DB access on main thread** in trace build by default.\r\nUse background threads explicitly or RxJava interfaces with `Schedulers.io()`.\r\n\r\n# Models\r\n\r\n## Condition Query Helpers\r\n\r\nCondition Query Helpers, e.g. `titleEq()` shown above, are methods\r\nto help make `WHERE` clauses, generated for columns with `indexed = true`.\r\n\r\nHere is a list of Condition Query Helpers that are generated for all the `indexed`` columns:\r\n\r\n* `*Eq(value)` to make `WHERE * = ?`\r\n* `*NotEq(values)` to make `WHERE * <> ?`\r\n* `*In(values)` to make `WHERE * IN (?, ?, ?, ...)`\r\n* `*In(values)` to make `WHERE * NOT IN (?, ?, ?, ...)`\r\n\r\nThe following are generated for `@Nullable` columns.\r\n\r\n* `*IsNull()` to make `WHERE * IS NULL`\r\n* `*IsNotNull()` to make `WHERE * IS NOT NULL`\r\n\r\nThe following are generated for numeric columns\r\n (i.e. `byte`, `short`, `int`, `long`, `float`, `double`, and their corresponding box types)\r\n\r\n* `*Lt(value)` to make `WHERE * < ?`\r\n* `*Le(value)` to make `WHERE * <= ?`\r\n* `*Gt(value)` to make `WHERE * > ?`\r\n* `*Ge(value)` to make `WHERE * >= ?`\r\n\r\n## Accessors\r\n\r\nYou can define private columns with `@Getter` and `@Setter`, which tells `orma-processor` to use accessors.\r\n\r\n```java\r\n@Table\r\npublic class KeyValuePair {\r\n\r\n    static final String kKey = \"key\";\r\n\r\n    static final String kValue = \"value\";\r\n\r\n    @Column(kKey)\r\n    private String key;\r\n\r\n    @Column(kValue)\r\n    private String value;\r\n\r\n    @Getter(kKey)\r\n    public String getKey() {\r\n        return key;\r\n    }\r\n\r\n    @Setter(kKey)\r\n    public void setKey(String key) {\r\n        this.key = key;\r\n    }\r\n\r\n    @Getter(kValue)\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    @Setter(kValue)\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n}\r\n```\r\n\r\n# Migration\r\n\r\nOrma has pluggable migration mechanism via the `MigrationEngine` interface.\r\n\r\nThe default migration engine is `SchemaDiffMigration`, which handles\r\nschema changes by making diff with old and new schemas.\r\n\r\nYou can set a custom migration engine to OrmaDatabase builders:\r\n\r\n```java\r\nclass CustomMigrationEngine implements MigrationEngine { ... }\r\n\r\nOrmaDatabase orma = OrmaDatabase.builder(context)\r\n  .migrationEngine(new CustomMigrationEngine())\r\n  .build();\r\n```\r\n\r\nSee [migration/README.md](migration/README.md) for details.\r\n\r\n# Type Adapters\r\n\r\nType adapters, which serializes and deserializes custom classes, are supported.\r\n\r\nIf you use type adapters, you can add them to `OrmaDatabase`:\r\n\r\n```java\r\nclass FooAdapter extends AbstractTypeAdapter<Foo> {\r\n    @Override\r\n    @NonNull\r\n    public String serialize(@NonNull Foo source) {\r\n        return ... serialize ...;\r\n    }\r\n\r\n    @Override\r\n    @NonNull\r\n    public Foo deserialize(@NonNull String serialized) {\r\n        return ... deserialize ...;\r\n    }\r\n}\r\n\r\nOrmaDatabase orma = OrmaDatabase.builder(context)\r\n    .addTypeAdapters(new FooAdapter())\r\n    .build();\r\n```\r\n\r\n## Built-In Type Adapters\r\n\r\nThere are a few built-in type adapter provided by default:\r\n\r\n* `StringListAdapter` for `List<String>`\r\n* `StringSetAdapter` for `Set<String>`\r\n* `DateAdapter` for `Date`\r\n* `UriAdapter` for `Uri`\r\n\r\n# Example\r\n\r\nThere is an example app to demonstrate what Orma is.\r\n\r\nIt is also including a simple benchmark with Realm and hand-written SQLiteDatabase\r\noperations.\r\n\r\nSee [example/](example/) for details.\r\n\r\n# Support\r\n\r\n* Use [GitHub issues](https://github.com/gfx/Android-Orma/issues) for the issue tracker\r\n* Feel free to ask for questions to the author [@\\_\\_gfx\\_\\_](https://twitter.com/__gfx__)\r\n\r\n# Licenses in Runtime Dependencies\r\n\r\n* https://github.com/ReactiveX/RxJava - Apache Software License 2.0\r\n* https://github.com/JSQLParser/JSqlParser - LGPL v2.1 and Apache Software License 2.0 (dual licenses)\r\n\r\n# Release Engineering\r\n\r\n```shell\r\n./gradlew bumpMajor # or bumpMinor / bumpPatch\r\nmake publish # does release engineering\r\n```\r\n\r\n# See Also\r\n\r\n* [SQLite](http://sqlite.org/)\r\n* [SQLiteDatabase](http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html)\r\n* [Version of SQLite used in Android? - Stack Overflow](http://stackoverflow.com/questions/2421189/version-of-sqlite-used-in-android)\r\n\r\n# Author\r\n\r\nFUJI Goro (gfx).\r\n\r\n# License\r\n\r\nThe MIT License.\r\n\r\nCopyright (c) 2015 FUJI Goro (gfx) <gfuji@cpan.org>.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"UA-71102420-1","note":"Don't delete this file! It's used internally to help with page regeneration."}