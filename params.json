{"name":"Orma","tagline":"An ORM for Android as a wrapper of SQLiteDatabase","body":"# Orma for Android [![Circle CI](https://circleci.com/gh/gfx/Android-Orma/tree/master.svg?style=svg)](https://circleci.com/gh/gfx/Android-Orma/tree/master) [ ![Download](https://api.bintray.com/packages/gfx/maven/orma/images/download.svg) ](https://bintray.com/gfx/maven/orma/)\r\n\r\nThis is an **alpha** software and the interface will change until v1.0.0, which will be released Jan 2016.\r\n\r\nOrma is a lightning-fast ORM (Object-Relation Mapper) for [Android SQLiteDatabase](http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html),\r\ngenerating helper classes at compile time with **annotation processing**.\r\n\r\n# Install\r\n\r\n```groovy\r\n// To use \"apt\" in dependencies\r\n\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\r\n    }\r\n}\r\n\r\napply plugin: 'com.neenbedankt.android-apt'\r\n```\r\n\r\n```groovy\r\n// To use orma in your Android applications or libraries\r\n\r\ndependencies {\r\n    apt 'com.github.gfx.android.orma:orma-processor:0.12.0'\r\n    compile 'com.github.gfx.android.orma:orma:0.12.0'\r\n}\r\n```\r\n\r\n# Synopsis\r\n\r\nFirst, define model classes annotated with `@Table`, `@Column`, and `@PrimaryKey`.\r\n\r\n```java\r\npackage com.github.gfx.android.orma.example;\r\n\r\nimport com.github.gfx.android.orma.annotation.Column;\r\nimport com.github.gfx.android.orma.annotation.PrimaryKey;\r\nimport com.github.gfx.android.orma.annotation.Table;\r\n\r\nimport android.support.annotation.Nullable;\r\n\r\n@Table\r\npublic class Todo {\r\n\r\n    @PrimaryKey\r\n    public long id;\r\n\r\n    @Column(indexed = true)\r\n    public String title;\r\n\r\n    @Column\r\n    @Nullable // indicates NOT NULL constraints\r\n    public String content;\r\n\r\n    @Column\r\n    public long createdTimeMillis;\r\n}\r\n```\r\n\r\nSecond, create a database handle `OrmaDatabase`, which is generated by `orma-processor`.\r\n\r\nTo make it:\r\n\r\n```java\r\n// see OrmaConfiguration for options\r\n// each value is the default.\r\nOrmaDatabase orma = OrmaDatabase.builder(context)\r\n    .name(context.getPackageName() + \".orma.db\") // optional\r\n    .migrationEngine(new SchemaDiffMigration(context, BuildConfig.DEBUG)) // optional\r\n    .typeAdapters(TypeAdapterRegistry.defaultTypeAdapters()) // optional\r\n    .writeAheadLogging(true) // optional\r\n    .trace(BuildConfig.DEBUG) // optional\r\n    .readOnMainThread(AccessThreadConstraint.WARNING) // optional\r\n    .writeOnMainThread(AccessThreadConstraint.FATAL) // optional\r\n    .build();\r\n```\r\n\r\nThen, you can create, read, update and delete models:\r\n\r\n```java\r\nTodo todo = ...;\r\n\r\n// create\r\norma.insertIntoTodo(todo);\r\n\r\n// prepared statements with transaction\r\norma.transactionSync( -> { // or transactionAsync() to execute tasks in background\r\n    Inserter<Todo> inserter = orma.prepareInsertIntoTodo();\r\n    inserter.execute(todo);\r\n});\r\n\r\n// read\r\norma.selectFromTodo()\r\n  .titleEq(\"foo\") // equivalent to `where(\"title = ?\", \"foo\")`\r\n  .observable() // first-class RxJava interface\r\n  .subscribe(...);\r\n\r\n// update\r\norma.updateTodo()\r\n  .titleEq(\"foo\")\r\n  .content(\"a new content\")\r\n  .execute();\r\n\r\n// delete\r\norma.deleteFromTodo()\r\n  .titleEq(\"foo\")\r\n  .execute();\r\n```\r\n\r\nNote that **Orma checks DB access on main thread** in debug build by default.\r\nUse background threads explicitly or RxJava interfaces with `Schedulers.io()`.\r\n\r\n# Description\r\n\r\nThere are already [a lot of ORMs](https://android-arsenal.com/tag/69). Why I have to add another?\r\n\r\nThe answer is that I need ORM that have the following features:\r\n\r\n* As fast as hand-written code\r\n* POJO models\r\n  * That is, model classes must have no restriction\r\n  * Might implement `Parcelable` and/or extend any classes\r\n  * They should be passed to another thread\r\n* Database handles must be instances\r\n  * Not a singleton nor static-method based class\r\n* Automatic migration\r\n  * For what can be detected logically\r\n  * i.e. simple `add column` and `drop column`\r\n* Code completion friendly\r\n  * `selectFromModel()` is better than `selectFrom(Model.class)`\r\n* Custom queries like `GROUP BY ... HAVING`\r\n\r\nThey are just what Orma has. This is as fast as hand-written code, its models have no restriction, database handle is\r\nnot a singleton, and has `SchemaDiffMigration` for automatic migration.\r\n\r\n# Database Handle\r\n\r\nA database handle, named `OrmaDatabase`, is generated by `orma-processor`,\r\nwhich is an entry point of all the high-level database operations.\r\n\r\nFor low-level operations, e.g. executing a raw SQL, you can also use\r\n`OrmaDatabase#getConnection()`, which returns `OrmaConnection`.\r\n\r\n# Models\r\n\r\nA **model** in Orma is a Java class that is annotated with `@Table`, which\r\nhas at least one field annotated with `@Column` or `@PrimaryKey`.\r\n\r\n`orma-processor` generates a `OrmaDatabase` class and helper classes for\r\n each model: `Schema`, `Relation`, `Inserter`, `Updater`, and `Deleter`.\r\n\r\n Because these helper classes are generated at the compile time, you\r\n can use Orma as a type-safe ORM.\r\n\r\n## Schema Helper\r\n\r\nSchema Helper, e.g. `Todo_Schema`, has metadata for the corresponding model.\r\n\r\nThis is an internal helper class which is not intended to be used by users.\r\n\r\n## Relation Helper\r\n\r\nRelation Helper, e.g. `Todo_Relation`, is created by the database handle:\r\n\r\n```java\r\nTodo_Relation relation = orma.selectFromTodo();\r\n```\r\n\r\nThis is a query builder for `SELECT` statements.\r\n\r\n## Inserter Helper\r\n\r\nInserter Helper, e.g. `Todo_Inserter`, is created by the database handle:\r\n\r\n```java\r\n# for a normal INSERT statement\r\nTodo_Inserter inserter = orma.prepateInsertIntoTodo();\r\n\r\n# for an INSERT OR REPLACE statement (a.k.a. \"upsert\")\r\nTodo_Inserter upserter = orma.prepateInsertOrReplaceIntoTodo();\r\n```\r\n\r\nThis is a prepared statement for `INSERT` statements.\r\n\r\n## Updater Helper\r\n\r\nUpdater Helper, e.g. `Todo_Updater`, is created by the database handle:\r\n\r\n```java\r\nTodo_Updater updater = orma.updateTodo();\r\n```\r\n\r\nThis is a query builder for `UPDATE` statements.\r\n\r\n## Deleter Helper\r\n\r\nUpdater Helper, e.g. `Todo_Deleter`, is created by the database handle:\r\n\r\n```java\r\nTodo_Deleter deleter = orma.deleteFromTodo();\r\n```\r\n\r\nThis is a query builder for `DELETE FROM` statements.\r\n\r\n## Condition Query Helpers\r\n\r\nThere are Condition Query Helpers, e.g. `titleEq()` shown in the synopsis\r\nsection, which ar methods to help make `WHERE` and `ORDER BY` clauses,\r\ngenerated for columns with `indexed = true` or the `@PrimaryKey` column.\r\n\r\nHere is a list of Condition Query Helpers that are generated for all the `indexed` columns:\r\n\r\n* `*Eq(value)` to make `WHERE * = ?`, which is also generated for `@PrimaryKey`\r\n* `*NotEq(values)` to make `WHERE * <> ?`\r\n* `*In(values)` to make `WHERE * IN (?, ?, ?, ...)`\r\n* `*In(values)` to make `WHERE * NOT IN (?, ?, ?, ...)`\r\n\r\nThe following are generated for `@Nullable` columns.\r\n\r\n* `*IsNull()` to make `WHERE * IS NULL`\r\n* `*IsNotNull()` to make `WHERE * IS NOT NULL`\r\n\r\nThe following are generated for numeric columns\r\n (i.e. `byte`, `short`, `int`, `long`, `float`, `double`, and their corresponding box types)\r\n\r\n* `*Lt(value)` to make `WHERE * < ?`\r\n* `*Le(value)` to make `WHERE * <= ?`\r\n* `*Gt(value)` to make `WHERE * > ?`\r\n* `*Ge(value)` to make `WHERE * >= ?`\r\n\r\nAnd `ORDER BY` helpers:\r\n\r\n* `orderBy*Asc()` to make `ORDER BY * ASC`\r\n* `orderBy*Desc()` to make `ORDER BY * DESC`\r\n\r\n## Accessors\r\n\r\nYou can define private columns with `@Getter` and `@Setter`,\r\n which tells `orma-processor` to use accessors.\r\n\r\n```java\r\n@Table\r\npublic class KeyValuePair {\r\n\r\n    static final String kKey = \"key\";\r\n\r\n    static final String kValue = \"value\";\r\n\r\n    @Column(kKey)\r\n    private String key;\r\n\r\n    @Column(kValue)\r\n    private String value;\r\n\r\n    @Getter(kKey)\r\n    public String getKey() {\r\n        return key;\r\n    }\r\n\r\n    @Setter(kKey)\r\n    public void setKey(String key) {\r\n        this.key = key;\r\n    }\r\n\r\n    @Getter(kValue)\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    @Setter(kValue)\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n}\r\n```\r\n\r\n# Migration\r\n\r\nOrma has pluggable migration mechanism via the `MigrationEngine` interface.\r\n\r\nThe default migration engine is `SchemaDiffMigration`, which handles\r\nschema changes by making diff with old and new table definitions.\r\n\r\nYou can set a custom migration engine to `OrmaDatabase` builders:\r\n\r\n```java\r\nclass CustomMigrationEngine implements MigrationEngine { ... }\r\n\r\nOrmaDatabase orma = OrmaDatabase.builder(context)\r\n  .migrationEngine(new CustomMigrationEngine())\r\n  .build();\r\n```\r\n\r\nSee [migration/README.md](migration/README.md) for details.\r\n\r\n# Type Adapters\r\n\r\nType adapters, which serializes and deserializes custom classes, are supported.\r\n\r\nIf you use type adapters, you can add them to `OrmaDatabase`:\r\n\r\n```java\r\nclass FooAdapter extends AbstractTypeAdapter<Foo> {\r\n    @Override\r\n    @NonNull\r\n    public String serialize(@NonNull Foo source) {\r\n        return ... serialize ...;\r\n    }\r\n\r\n    @Override\r\n    @NonNull\r\n    public Foo deserialize(@NonNull String serialized) {\r\n        return ... deserialize ...;\r\n    }\r\n}\r\n\r\nOrmaDatabase orma = OrmaDatabase.builder(context)\r\n    .addTypeAdapters(new FooAdapter())\r\n    .build();\r\n```\r\n\r\n## Built-In Type Adapters\r\n\r\nThere are a few built-in type adapter provided by default:\r\n\r\n* `StringListAdapter` for `List<String>`\r\n* `StringSetAdapter` for `Set<String>`\r\n* `DateAdapter` for `Date`\r\n* `UriAdapter` for `Uri`\r\n\r\n# Example\r\n\r\nThere is an example app to demonstrate what Orma is.\r\n\r\nIt is also including a simple benchmark with Realm and hand-written SQLiteDatabase\r\noperations.\r\n\r\nSee [example/](example/) for details.\r\n\r\n# Benchmark\r\n\r\nThere is a simple benchmark with [Realm](https://github.com/realm/realm-java) and hand-written code:\r\n\r\n[example/BenchmarkActivity](example/src/main/java/com/github/gfx/android/orma/example/activity/BenchmarkActivity.java)\r\n\r\nHere is a result performed on Android 5.0.2 / Xperia Z4\r\nas of Orma v0.9.0 and Realm 0.86.0:\r\n\r\n<img src=\"benchmark_v0.9.0_2015-12-10.png\" alt=\"\" width=\"443\"/>\r\n\r\n# Support\r\n\r\n* Use [GitHub issues](https://github.com/gfx/Android-Orma/issues) for the issue tracker\r\n* Feel free to ask for questions to the author [@\\_\\_gfx\\_\\_](https://twitter.com/__gfx__)\r\n\r\n# Licenses in Runtime Dependencies\r\n\r\n* https://github.com/ReactiveX/RxJava - Apache Software License 2.0\r\n* https://github.com/JSQLParser/JSqlParser - LGPL v2.1 and Apache Software License 2.0 (dual licenses)\r\n\r\n# Release Engineering for Maintainers\r\n\r\n```shell\r\n./gradlew bumpMajor # or bumpMinor / bumpPatch\r\nmake publish # does release engineering\r\n```\r\n\r\n# See Also\r\n\r\n* [SQLite](http://sqlite.org/)\r\n* [SQLiteDatabase](http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html)\r\n* [Version of SQLite used in Android? - Stack Overflow](http://stackoverflow.com/questions/2421189/version-of-sqlite-used-in-android)\r\n\r\n# Author\r\n\r\nFUJI Goro ([gfx](https://github.com/gfx)).\r\n\r\n# License\r\n\r\nCopyright (c) 2015 FUJI Goro (gfx).\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","google":"UA-71102420-1","note":"Don't delete this file! It's used internally to help with page regeneration."}