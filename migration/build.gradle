apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName rootProject.ext.metadata.version
    }
    buildTypes {
        release {
        }
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}

final PACKAGE = 'com.github.gfx.android.orma.migration.sqliteparser.g'
final PACKAGE_PATH = PACKAGE.replaceAll(/\./, '/')
final GRAMMAR_FILE = project.file("src/main/antlr/SQLite.g4")
final ANTLR_OUTPUT_DIR = "$buildDir/generated/source/antlr"

configurations {
    antlr
}

android.sourceSets.main.java.srcDir ANTLR_OUTPUT_DIR

task generateParserSources(type: JavaExec) {
    description = 'Generate SQLiteParser sources with ANTLR4'
    main = 'org.antlr.v4.Tool'
    args = [GRAMMAR_FILE, '-o', "$ANTLR_OUTPUT_DIR/$PACKAGE_PATH", '-package', PACKAGE, '-Werror', '-long-messages']
    classpath =  configurations.antlr
}

tasks.preBuild.dependsOn(generateParserSources)

dependencies {
    antlr 'org.antlr:antlr4:4.5.1'
    compile 'org.antlr:antlr4-runtime:4.5.1'

    compile 'com.android.support:support-annotations:23.1.1'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}

publish {
    artifactId = 'orma-migration'
    desc = 'An smart SQLiteDatabase migration engine for Orma'

    def metadata = rootProject.ext.metadata
    groupId = metadata.groupId
    publishVersion = metadata.version
    website = metadata.website
    repository = metadata.repository
    licences = metadata.licences
}
